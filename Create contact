exports.createContact = async (req, res, next) => {
  try {
    const { error, value } = contactCreateSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    const contact = new Contact(value);
    const saved = await contact.save();
    res.status(201).json(saved);
  } catch (err) {
    next(err);
  }
};
exports.getContacts = async (req, res, next) => {
  try {
    let { page = 1, limit = 10, q, sortBy = 'createdAt', order = 'desc', tag } = req.query;
    page = Number(page);
    limit = Number(limit);

    const filter = {};
    if (q) filter.$text = { $search: q };
    if (tag) filter.tags = tag;

    const total = await Contact.countDocuments(filter);
    const contacts = await Contact.find(filter)
      .sort({ [sortBy]: order === 'asc' ? 1 : -1 })
      .skip((page - 1) * limit)
      .limit(limit)
      .exec();

    res.json({
      page,
      limit,
      total,
      totalPages: Math.ceil(total / limit),
      data: contacts
    });
  } catch (err) {
    next(err);
  }
};
exports.getContactById = async (req, res, next) => {
  try {
    const contact = await Contact.findById(req.params.id);
    if (!contact) return res.status(404).json({ message: 'Contact not found' });
    res.json(contact);
  } catch (err) {
    next(err);
  }
};
exports.updateContact = async (req, res, next) => {
  try {
    const { error, value } = contactUpdateSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    const contact = await Contact.findByIdAndUpdate(req.params.id, value, { new: true, runValidators: true });
    if (!contact) return res.status(404).json({ message: 'Contact not found' });
    res.json(contact);
  } catch (err) {
    next(err);
  }
};
exports.deleteContact = async (req, res, next) => {
  try {
    const contact = await Contact.findByIdAndDelete(req.params.id);
    if (!contact) return res.status(404).json({ message: 'Contact not found' });
    res.json({ message: 'Contact deleted' });
  } catch (err) {
    next(err);
  }
};
exports.deleteManyContacts = async (req, res, next) => {
  try {
    const { ids } = req.body;
    if (!Array.isArray(ids) || ids.length === 0) return res.status(400).json({ message: 'ids array required' });

    const result = await Contact.deleteMany({ _id: { $in: ids } });
    res.json({ deletedCount: result.deletedCount });
  } catch (err) {
    next(err);
  }
};
